// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vogtp/go-parental-control/ent/activity"
	"github.com/vogtp/go-parental-control/ent/day"
	"github.com/vogtp/go-parental-control/ent/predicate"
)

// DayUpdate is the builder for updating Day entities.
type DayUpdate struct {
	config
	hooks    []Hook
	mutation *DayMutation
}

// Where appends a list predicates to the DayUpdate builder.
func (du *DayUpdate) Where(ps ...predicate.Day) *DayUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetYear sets the "year" field.
func (du *DayUpdate) SetYear(i int) *DayUpdate {
	du.mutation.ResetYear()
	du.mutation.SetYear(i)
	return du
}

// AddYear adds i to the "year" field.
func (du *DayUpdate) AddYear(i int) *DayUpdate {
	du.mutation.AddYear(i)
	return du
}

// SetMonth sets the "month" field.
func (du *DayUpdate) SetMonth(i int) *DayUpdate {
	du.mutation.ResetMonth()
	du.mutation.SetMonth(i)
	return du
}

// AddMonth adds i to the "month" field.
func (du *DayUpdate) AddMonth(i int) *DayUpdate {
	du.mutation.AddMonth(i)
	return du
}

// SetDay sets the "day" field.
func (du *DayUpdate) SetDay(i int) *DayUpdate {
	du.mutation.ResetDay()
	du.mutation.SetDay(i)
	return du
}

// AddDay adds i to the "day" field.
func (du *DayUpdate) AddDay(i int) *DayUpdate {
	du.mutation.AddDay(i)
	return du
}

// AddActivityIDs adds the "activity" edge to the Activity entity by IDs.
func (du *DayUpdate) AddActivityIDs(ids ...int) *DayUpdate {
	du.mutation.AddActivityIDs(ids...)
	return du
}

// AddActivity adds the "activity" edges to the Activity entity.
func (du *DayUpdate) AddActivity(a ...*Activity) *DayUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.AddActivityIDs(ids...)
}

// Mutation returns the DayMutation object of the builder.
func (du *DayUpdate) Mutation() *DayMutation {
	return du.mutation
}

// ClearActivity clears all "activity" edges to the Activity entity.
func (du *DayUpdate) ClearActivity() *DayUpdate {
	du.mutation.ClearActivity()
	return du
}

// RemoveActivityIDs removes the "activity" edge to Activity entities by IDs.
func (du *DayUpdate) RemoveActivityIDs(ids ...int) *DayUpdate {
	du.mutation.RemoveActivityIDs(ids...)
	return du
}

// RemoveActivity removes "activity" edges to Activity entities.
func (du *DayUpdate) RemoveActivity(a ...*Activity) *DayUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return du.RemoveActivityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DayUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DayUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DayUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DayUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DayUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   day.Table,
			Columns: day.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: day.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldYear,
		})
	}
	if value, ok := du.mutation.AddedYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldYear,
		})
	}
	if value, ok := du.mutation.Month(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldMonth,
		})
	}
	if value, ok := du.mutation.AddedMonth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldMonth,
		})
	}
	if value, ok := du.mutation.Day(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldDay,
		})
	}
	if value, ok := du.mutation.AddedDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldDay,
		})
	}
	if du.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   day.ActivityTable,
			Columns: []string{day.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedActivityIDs(); len(nodes) > 0 && !du.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   day.ActivityTable,
			Columns: []string{day.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   day.ActivityTable,
			Columns: []string{day.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{day.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DayUpdateOne is the builder for updating a single Day entity.
type DayUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DayMutation
}

// SetYear sets the "year" field.
func (duo *DayUpdateOne) SetYear(i int) *DayUpdateOne {
	duo.mutation.ResetYear()
	duo.mutation.SetYear(i)
	return duo
}

// AddYear adds i to the "year" field.
func (duo *DayUpdateOne) AddYear(i int) *DayUpdateOne {
	duo.mutation.AddYear(i)
	return duo
}

// SetMonth sets the "month" field.
func (duo *DayUpdateOne) SetMonth(i int) *DayUpdateOne {
	duo.mutation.ResetMonth()
	duo.mutation.SetMonth(i)
	return duo
}

// AddMonth adds i to the "month" field.
func (duo *DayUpdateOne) AddMonth(i int) *DayUpdateOne {
	duo.mutation.AddMonth(i)
	return duo
}

// SetDay sets the "day" field.
func (duo *DayUpdateOne) SetDay(i int) *DayUpdateOne {
	duo.mutation.ResetDay()
	duo.mutation.SetDay(i)
	return duo
}

// AddDay adds i to the "day" field.
func (duo *DayUpdateOne) AddDay(i int) *DayUpdateOne {
	duo.mutation.AddDay(i)
	return duo
}

// AddActivityIDs adds the "activity" edge to the Activity entity by IDs.
func (duo *DayUpdateOne) AddActivityIDs(ids ...int) *DayUpdateOne {
	duo.mutation.AddActivityIDs(ids...)
	return duo
}

// AddActivity adds the "activity" edges to the Activity entity.
func (duo *DayUpdateOne) AddActivity(a ...*Activity) *DayUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.AddActivityIDs(ids...)
}

// Mutation returns the DayMutation object of the builder.
func (duo *DayUpdateOne) Mutation() *DayMutation {
	return duo.mutation
}

// ClearActivity clears all "activity" edges to the Activity entity.
func (duo *DayUpdateOne) ClearActivity() *DayUpdateOne {
	duo.mutation.ClearActivity()
	return duo
}

// RemoveActivityIDs removes the "activity" edge to Activity entities by IDs.
func (duo *DayUpdateOne) RemoveActivityIDs(ids ...int) *DayUpdateOne {
	duo.mutation.RemoveActivityIDs(ids...)
	return duo
}

// RemoveActivity removes "activity" edges to Activity entities.
func (duo *DayUpdateOne) RemoveActivity(a ...*Activity) *DayUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return duo.RemoveActivityIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DayUpdateOne) Select(field string, fields ...string) *DayUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Day entity.
func (duo *DayUpdateOne) Save(ctx context.Context) (*Day, error) {
	var (
		err  error
		node *Day
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DayMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Day)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DayMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DayUpdateOne) SaveX(ctx context.Context) *Day {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DayUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DayUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DayUpdateOne) sqlSave(ctx context.Context) (_node *Day, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   day.Table,
			Columns: day.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: day.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Day.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, day.FieldID)
		for _, f := range fields {
			if !day.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != day.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Year(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldYear,
		})
	}
	if value, ok := duo.mutation.AddedYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldYear,
		})
	}
	if value, ok := duo.mutation.Month(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldMonth,
		})
	}
	if value, ok := duo.mutation.AddedMonth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldMonth,
		})
	}
	if value, ok := duo.mutation.Day(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldDay,
		})
	}
	if value, ok := duo.mutation.AddedDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: day.FieldDay,
		})
	}
	if duo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   day.ActivityTable,
			Columns: []string{day.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedActivityIDs(); len(nodes) > 0 && !duo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   day.ActivityTable,
			Columns: []string{day.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   day.ActivityTable,
			Columns: []string{day.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Day{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{day.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
