// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vogtp/go-win-session/ent/day"
)

// Day is the model entity for the Day schema.
type Day struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Year holds the value of the "year" field.
	Year int `json:"year,omitempty"`
	// Month holds the value of the "month" field.
	Month int `json:"month,omitempty"`
	// Day holds the value of the "day" field.
	Day int `json:"day,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DayQuery when eager-loading is set.
	Edges DayEdges `json:"edges"`
}

// DayEdges holds the relations/edges for other nodes in the graph.
type DayEdges struct {
	// Activity holds the value of the activity edge.
	Activity []*Activity `json:"activity,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActivityOrErr returns the Activity value or an error if the edge
// was not loaded in eager-loading.
func (e DayEdges) ActivityOrErr() ([]*Activity, error) {
	if e.loadedTypes[0] {
		return e.Activity, nil
	}
	return nil, &NotLoadedError{edge: "activity"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Day) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case day.FieldID, day.FieldYear, day.FieldMonth, day.FieldDay:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Day", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Day fields.
func (d *Day) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case day.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case day.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				d.Year = int(value.Int64)
			}
		case day.FieldMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field month", values[i])
			} else if value.Valid {
				d.Month = int(value.Int64)
			}
		case day.FieldDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field day", values[i])
			} else if value.Valid {
				d.Day = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryActivity queries the "activity" edge of the Day entity.
func (d *Day) QueryActivity() *ActivityQuery {
	return (&DayClient{config: d.config}).QueryActivity(d)
}

// Update returns a builder for updating this Day.
// Note that you need to call Day.Unwrap() before calling this method if this Day
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Day) Update() *DayUpdateOne {
	return (&DayClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Day entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Day) Unwrap() *Day {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Day is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Day) String() string {
	var builder strings.Builder
	builder.WriteString("Day(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("year=")
	builder.WriteString(fmt.Sprintf("%v", d.Year))
	builder.WriteString(", ")
	builder.WriteString("month=")
	builder.WriteString(fmt.Sprintf("%v", d.Month))
	builder.WriteString(", ")
	builder.WriteString("day=")
	builder.WriteString(fmt.Sprintf("%v", d.Day))
	builder.WriteByte(')')
	return builder.String()
}

// Days is a parsable slice of Day.
type Days []*Day

func (d Days) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
